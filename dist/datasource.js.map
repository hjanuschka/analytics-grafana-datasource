{"version":3,"sources":["../src/datasource.js"],"names":["_","convertFilterValueToProperType","ATTRIBUTE","AGGREGATION","calculateAutoInterval","QUERY_INTERVAL","transform","ResultFormat","BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","isAdAnalytics","jsonData","name","q","withCredentials","headers","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","map","target","metric","COUNT","dimension","LICENSE_KEY","resultFormat","TIME_SERIES","interval","HOUR","filters","operator","value","orderBy","e","order","licenseKey","license","start","range","from","toISOString","end","to","percentileValue","AUTO","intervalMs","groupBy","Number","limit","undefined","apiRequestUrl","doRequest","method","resultTarget","alias","refId","Promise","all","then","targetResponses","result","response","series","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport {calculateAutoInterval, QUERY_INTERVAL} from './types/intervals';\nimport { transform } from './result_transformer';\nimport { ResultFormat } from './types/resultFormat';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.isAdAnalytics = instanceSettings.jsonData.isAdAnalytics;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    const targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || ResultFormat.TIME_SERIES;\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      const filters = _.map(target.filter, filter => {\n        return {\n          name: filter.name,\n          operator: filter.operator,\n          value: convertFilterValueToProperType(filter)\n        }\n      });\n      const orderBy = _.map(target.orderBy, e => ({name: e.name, order: e.order}));\n      const data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters,\n        orderBy\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === ResultFormat.TIME_SERIES) {\n        data['interval'] = target.interval === QUERY_INTERVAL.AUTO ? calculateAutoInterval(options.intervalMs) : target.interval;\n      }\n      data['groupBy'] = target.groupBy;\n      data['limit'] = Number(target.limit) || undefined;\n      var apiRequestUrl = this.url + '/analytics/queries'\n      if(this.isAdAnalytics) {\n        var apiRequestUrl = this.url + '/analytics/ads/queries'\n      }      \n      return this.doRequest({\n        url: apiRequestUrl + '/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      let result = [];\n      _.map(targetResponses, response => {\n        const series = transform(response, options);\n        result = [...result, ...series];\n      });\n      return {\n        data: result\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"],"file":"datasource.js"}