{"version":3,"sources":["../../src/datasource.js"],"names":["BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","isAdAnalytics","jsonData","name","q","withCredentials","headers","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","_","map","target","metric","AGGREGATION","COUNT","dimension","ATTRIBUTE","LICENSE_KEY","resultFormat","ResultFormat","TIME_SERIES","interval","QUERY_INTERVAL","HOUR","filters","operator","value","orderBy","e","order","licenseKey","license","start","range","from","toISOString","end","to","percentileValue","AUTO","intervalMs","groupBy","Number","limit","undefined","apiRequestUrl","doRequest","method","resultTarget","alias","refId","Promise","all","then","targetResponses","result","response","series","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport {calculateAutoInterval, QUERY_INTERVAL} from './types/intervals';\nimport { transform } from './result_transformer';\nimport { ResultFormat } from './types/resultFormat';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.isAdAnalytics = instanceSettings.jsonData.isAdAnalytics;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    const targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || ResultFormat.TIME_SERIES;\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      const filters = _.map(target.filter, filter => {\n        return {\n          name: filter.name,\n          operator: filter.operator,\n          value: convertFilterValueToProperType(filter)\n        }\n      });\n      const orderBy = _.map(target.orderBy, e => ({name: e.name, order: e.order}));\n      const data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters,\n        orderBy\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === ResultFormat.TIME_SERIES) {\n        data['interval'] = target.interval === QUERY_INTERVAL.AUTO ? calculateAutoInterval(options.intervalMs) : target.interval;\n      }\n      data['groupBy'] = target.groupBy;\n      data['limit'] = Number(target.limit) || undefined;\n      var apiRequestUrl = this.url + '/analytics/queries'\n      if(this.isAdAnalytics) {\n        var apiRequestUrl = this.url + '/analytics/ads/queries'\n      }      \n      return this.doRequest({\n        url: apiRequestUrl + '/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      let result = [];\n      _.map(targetResponses, response => {\n        const series = transform(response, options);\n        result = [...result, ...series];\n      });\n      return {\n        data: result\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"],"file":"datasource.js"}